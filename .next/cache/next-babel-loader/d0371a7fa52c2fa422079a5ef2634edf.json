{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Fragment } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\n\nclass Chat extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      chats: [] //Initialize the state with an empty chats array property\n\n    });\n\n    _defineProperty(this, \"handleKeyUp\", evt => {\n      const value = evt.target.value;\n\n      if (evt.keyCode === 13 && !evt.shiftKey) {\n        const {\n          activeUser: user\n        } = this.props; // Construct a chat object containing the user sending the message (currently active user), message & timestamp\n\n        const chat = {\n          user,\n          message: value,\n          timestamp: +new Date()\n        }; // Clear the textarea\n\n        evt.target.value = ''; // Pass the chat object as payload, over a POST /message HTTP request\n\n        axios.post('/message', chat);\n      }\n    });\n  }\n\n  componentDidMount() {\n    // Setup a Pusher connection when the component mounts\n    this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true\n    }); // Setup a Channel subscription to a Pusher channel *chat-room* when the component mounts\n\n    this.channel = this.pusher.subscribe('chat-room'); // Binding to the new-message event on the channel, which gets triggered when a new chat message comes in\n\n    this.channel.bind('new-message', ({\n      chat = null\n    }) => {\n      const {\n        chats\n      } = this.state;\n      chat && chats.push(chat);\n      this.setState({\n        chats\n      });\n    }); // Binding the connected event on the Pusher client, on a fresh connection\n\n    this.pusher.connection.bind('connected', () => {\n      axios.post('/messages') // Fetch all the chat messages from history by making a POST /messages HTTP request using the axios\n      .then(response => {\n        const chats = response.data.messages;\n        this.setState({\n          chats\n        }); // Set the fetched messages to the state\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.pusher.disconnect();\n  }\n\n  render() {\n    /* activeUser prop to identify the currently active user */\n    return this.props.activeUser && __jsx(Fragment, null, __jsx(\"div\", {\n      className: \"border-bottom border-gray w-100 d-flex align-items-center bg-white\",\n      style: {\n        height: 90\n      }\n    }, __jsx(\"h2\", {\n      className: \"text-dark mb-0 mx-4 px-2\"\n    }, this.props.activeUser)), __jsx(\"div\", {\n      className: \"border-top border-gray w-100 px-4 d-flex align-items-center bg-light\",\n      style: {\n        minHeight: 90\n      }\n    }, __jsx(\"textarea\", {\n      className: \"form-control px-3 py-2\",\n      onKeyUp: this.handleKeyUp,\n      placeholder: \"Enter a chat message\",\n      style: {\n        resize: 'none'\n      }\n    })));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["I:/Projects/nextjs-chat-app-with-sentiment-analysis/components/Chat.js"],"names":["React","Fragment","axios","Pusher","Chat","Component","chats","evt","value","target","keyCode","shiftKey","activeUser","user","props","chat","message","timestamp","Date","post","componentDidMount","pusher","process","env","PUSHER_APP_KEY","cluster","PUSHER_APP_CLUSTER","encrypted","channel","subscribe","bind","state","push","setState","connection","then","response","data","messages","componentWillUnmount","disconnect","render","height","minHeight","handleKeyUp","resize"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\r\nimport axios from 'axios';\r\nimport Pusher from 'pusher-js';\r\n\r\nclass Chat extends React.Component {\r\n\r\n    state = {\r\n        chats: [] //Initialize the state with an empty chats array property\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Setup a Pusher connection when the component mounts\r\n        this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\r\n            cluster: process.env.PUSHER_APP_CLUSTER,\r\n            encrypted: true\r\n        });\r\n\r\n        // Setup a Channel subscription to a Pusher channel *chat-room* when the component mounts\r\n        this.channel = this.pusher.subscribe('chat-room');\r\n\r\n        // Binding to the new-message event on the channel, which gets triggered when a new chat message comes in\r\n        this.channel.bind('new-message', ({ chat = null }) => {\r\n            const { chats } = this.state;\r\n            chat && chats.push(chat);\r\n            this.setState({ chats });\r\n        });\r\n        // Binding the connected event on the Pusher client, on a fresh connection\r\n        this.pusher.connection.bind('connected', () => {\r\n            axios.post('/messages') // Fetch all the chat messages from history by making a POST /messages HTTP request using the axios\r\n                .then(response => {\r\n                    const chats = response.data.messages;\r\n                    this.setState({ chats }); // Set the fetched messages to the state\r\n                });\r\n        });\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.pusher.disconnect();\r\n    }\r\n\r\n    handleKeyUp = evt => {\r\n        const value = evt.target.value;\r\n\r\n        if (evt.keyCode === 13 && !evt.shiftKey) {\r\n            const { activeUser: user } = this.props;\r\n            // Construct a chat object containing the user sending the message (currently active user), message & timestamp\r\n            const chat = { user, message: value, timestamp: +new Date };\r\n            // Clear the textarea\r\n            evt.target.value = '';\r\n            // Pass the chat object as payload, over a POST /message HTTP request\r\n            axios.post('/message', chat);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        /* activeUser prop to identify the currently active user */\r\n        return (this.props.activeUser && <Fragment>\r\n\r\n            <div className=\"border-bottom border-gray w-100 d-flex align-items-center bg-white\" style={{ height: 90 }}>\r\n                <h2 className=\"text-dark mb-0 mx-4 px-2\">{this.props.activeUser}</h2>\r\n            </div>\r\n\r\n            <div className=\"border-top border-gray w-100 px-4 d-flex align-items-center bg-light\" style={{ minHeight: 90 }}>\r\n                <textarea className=\"form-control px-3 py-2\" onKeyUp={this.handleKeyUp} placeholder=\"Enter a chat message\" style={{ resize: 'none' }}></textarea>\r\n            </div>\r\n\r\n        </Fragment>)\r\n    }\r\n\r\n}\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}