{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Fragment } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\n\nvar Chat = /*#__PURE__*/function (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  var _super = _createSuper(Chat);\n\n  function Chat() {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      chats: [] //Initialize the state with an empty chats array property\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyUp\", function (evt) {\n      var value = evt.target.value;\n\n      if (evt.keyCode === 13 && !evt.shiftKey) {\n        var user = _this.props.activeUser; // Construct a chat object containing the user sending the message (currently active user), message & timestamp\n\n        var chat = {\n          user: user,\n          message: value,\n          timestamp: +new Date()\n        }; // Clear the textarea\n\n        evt.target.value = ''; // Pass the chat object as payload, over a POST /message HTTP request\n\n        axios.post('/message', chat);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // Setup a Pusher connection when the component mounts\n      this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n        cluster: process.env.PUSHER_APP_CLUSTER,\n        encrypted: true\n      }); // Setup a Channel subscription to a Pusher channel *chat-room* when the component mounts\n\n      this.channel = this.pusher.subscribe('chat-room'); // Binding to the new-message event on the channel, which gets triggered when a new chat message comes in\n\n      this.channel.bind('new-message', function (_ref) {\n        var _ref$chat = _ref.chat,\n            chat = _ref$chat === void 0 ? null : _ref$chat;\n        var chats = _this2.state.chats;\n        chat && chats.push(chat);\n\n        _this2.setState({\n          chats: chats\n        });\n      }); // Binding the connected event on the Pusher client, on a fresh connection\n\n      this.pusher.connection.bind('connected', function () {\n        axios.post('/messages') // Fetch all the chat messages from history by making a POST /messages HTTP request using the axios\n        .then(function (response) {\n          var chats = response.data.messages;\n\n          _this2.setState({\n            chats: chats\n          }); // Set the fetched messages to the state\n\n        });\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.pusher.disconnect();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      /* activeUser prop to identify the currently active user */\n      return this.props.activeUser && __jsx(Fragment, null, __jsx(\"div\", {\n        className: \"border-bottom border-gray w-100 d-flex align-items-center bg-white\",\n        style: {\n          height: 90\n        }\n      }, __jsx(\"h2\", {\n        className: \"text-dark mb-0 mx-4 px-2\"\n      }, this.props.activeUser)), __jsx(\"div\", {\n        className: \"border-top border-gray w-100 px-4 d-flex align-items-center bg-light\",\n        style: {\n          minHeight: 90\n        }\n      }, __jsx(\"textarea\", {\n        className: \"form-control px-3 py-2\",\n        onKeyUp: this.handleKeyUp,\n        placeholder: \"Enter a chat message\",\n        style: {\n          resize: 'none'\n        }\n      })));\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat;","map":{"version":3,"sources":["I:/Projects/nextjs-chat-app-with-sentiment-analysis/components/Chat.js"],"names":["React","Fragment","axios","Pusher","Chat","chats","evt","value","target","keyCode","shiftKey","user","props","activeUser","chat","message","timestamp","Date","post","pusher","process","env","PUSHER_APP_KEY","cluster","PUSHER_APP_CLUSTER","encrypted","channel","subscribe","bind","state","push","setState","connection","then","response","data","messages","disconnect","height","minHeight","handleKeyUp","resize","Component"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\r\nimport axios from 'axios';\r\nimport Pusher from 'pusher-js';\r\n\r\nclass Chat extends React.Component {\r\n\r\n    state = {\r\n        chats: [] //Initialize the state with an empty chats array property\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Setup a Pusher connection when the component mounts\r\n        this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\r\n            cluster: process.env.PUSHER_APP_CLUSTER,\r\n            encrypted: true\r\n        });\r\n\r\n        // Setup a Channel subscription to a Pusher channel *chat-room* when the component mounts\r\n        this.channel = this.pusher.subscribe('chat-room');\r\n\r\n        // Binding to the new-message event on the channel, which gets triggered when a new chat message comes in\r\n        this.channel.bind('new-message', ({ chat = null }) => {\r\n            const { chats } = this.state;\r\n            chat && chats.push(chat);\r\n            this.setState({ chats });\r\n        });\r\n        // Binding the connected event on the Pusher client, on a fresh connection\r\n        this.pusher.connection.bind('connected', () => {\r\n            axios.post('/messages') // Fetch all the chat messages from history by making a POST /messages HTTP request using the axios\r\n                .then(response => {\r\n                    const chats = response.data.messages;\r\n                    this.setState({ chats }); // Set the fetched messages to the state\r\n                });\r\n        });\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.pusher.disconnect();\r\n    }\r\n\r\n    handleKeyUp = evt => {\r\n        const value = evt.target.value;\r\n\r\n        if (evt.keyCode === 13 && !evt.shiftKey) {\r\n            const { activeUser: user } = this.props;\r\n            // Construct a chat object containing the user sending the message (currently active user), message & timestamp\r\n            const chat = { user, message: value, timestamp: +new Date };\r\n            // Clear the textarea\r\n            evt.target.value = '';\r\n            // Pass the chat object as payload, over a POST /message HTTP request\r\n            axios.post('/message', chat);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        /* activeUser prop to identify the currently active user */\r\n        return (this.props.activeUser && <Fragment>\r\n\r\n            <div className=\"border-bottom border-gray w-100 d-flex align-items-center bg-white\" style={{ height: 90 }}>\r\n                <h2 className=\"text-dark mb-0 mx-4 px-2\">{this.props.activeUser}</h2>\r\n            </div>\r\n\r\n            <div className=\"border-top border-gray w-100 px-4 d-flex align-items-center bg-light\" style={{ minHeight: 90 }}>\r\n                <textarea className=\"form-control px-3 py-2\" onKeyUp={this.handleKeyUp} placeholder=\"Enter a chat message\" style={{ resize: 'none' }}></textarea>\r\n            </div>\r\n\r\n        </Fragment>)\r\n    }\r\n\r\n}\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}